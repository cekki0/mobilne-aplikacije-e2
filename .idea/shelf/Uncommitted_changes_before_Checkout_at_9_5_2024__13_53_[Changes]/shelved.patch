Index: app/src/main/java/com/example/fijiapp/activity/EventActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fijiapp.activity;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.fijiapp.R;\r\nimport com.example.fijiapp.model.Event;\r\nimport com.example.fijiapp.model.ODEvent;\r\nimport com.example.fijiapp.model.Privacy;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport org.checkerframework.checker.nullness.qual.NonNull;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class EventActivity extends AppCompatActivity implements ServiceDialog.OnSaveListener{\r\n\r\n    private final FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    private List<String> services = null;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event);\r\n\r\n        populateEventType();\r\n\r\n        Button buttonManageServices = findViewById(R.id.buttonManageServices);\r\n        buttonManageServices.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                ServiceDialog serviceDialog = new ServiceDialog(EventActivity.this, EventActivity.this);\r\n                serviceDialog.show();\r\n            }\r\n        });\r\n\r\n        Button buttonSaveEvent = findViewById(R.id.buttonSaveEvent);\r\n        buttonSaveEvent.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                saveEvent();\r\n            }\r\n        });\r\n\r\n        populateEventType();\r\n    }\r\n\r\n    @Override\r\n    public void onSave(List<String> services) {\r\n        this.services = services;\r\n    }\r\n\r\n    private void populateEventType() {\r\n        // Define event types\r\n        String[] eventTypes = {\"Type 1\", \"Type 2\", \"Type 3\", \"Other\"};\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, eventTypes);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        Spinner spinnerEventType = findViewById(R.id.spinnerEventType);\r\n        spinnerEventType.setAdapter(adapter);\r\n    }\r\n\r\n    private void saveEvent() {\r\n        // Retrieve data from UI elements\r\n        EditText editTextEventName = findViewById(R.id.editTextEventName);\r\n        EditText editTextEventDescription = findViewById(R.id.editTextEventDescription);\r\n        EditText editTextMaxParticipants = findViewById(R.id.editTextMaxParticipants);\r\n        EditText editTextLocationConstraint = findViewById(R.id.editTextLocationConstraint);\r\n        EditText editTextTimeConstraint = findViewById(R.id.editTextTimeConstraint);\r\n        Spinner spinnerEventType = findViewById(R.id.spinnerEventType);\r\n        RadioGroup radioGroupPrivateRules = findViewById(R.id.radioGroupPrivateRules);\r\n\r\n        // Create Event object\r\n        String eventName = editTextEventName.getText().toString().trim();\r\n        String eventDescription = editTextEventDescription.getText().toString().trim();\r\n        int maxParticipants = Integer.parseInt(editTextMaxParticipants.getText().toString().trim());\r\n        String locationConstraint = editTextLocationConstraint.getText().toString().trim();\r\n        String eventType = spinnerEventType.getSelectedItem().toString().trim();\r\n        String timeConstraintString = editTextTimeConstraint.getText().toString().trim();\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd.MM.yyyy\", Locale.getDefault());\r\n        Date timeConstraint = null;\r\n        try {\r\n            timeConstraint = dateFormat.parse(timeConstraintString);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Get selected privacy (Public or Private)\r\n        RadioButton selectedRadioButton = findViewById(radioGroupPrivateRules.getCheckedRadioButtonId());\r\n        Privacy privacy = (selectedRadioButton.getId() == R.id.radioButtonPublic) ? Privacy.PUBLIC : Privacy.PRIVATE;\r\n\r\n        ODEvent event = new ODEvent(eventName, eventDescription, maxParticipants, privacy, locationConstraint, timeConstraint, eventType, services);\r\n\r\n        db.collection(\"odEvents\")\r\n                .add(event)\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\r\n                    @Override\r\n                    public void onSuccess(DocumentReference documentReference) {\r\n                        Toast.makeText(EventActivity.this, \"Event saved successfully\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Toast.makeText(EventActivity.this, \"Error saving event: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fijiapp/activity/EventActivity.java b/app/src/main/java/com/example/fijiapp/activity/EventActivity.java
--- a/app/src/main/java/com/example/fijiapp/activity/EventActivity.java	(revision d23069e360fd335693d76d78452f6ac48e52bafd)
+++ b/app/src/main/java/com/example/fijiapp/activity/EventActivity.java	(date 1715254020027)
@@ -10,6 +10,7 @@
 import android.widget.Spinner;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
 import com.example.fijiapp.R;
@@ -21,7 +22,6 @@
 import com.google.firebase.firestore.DocumentReference;
 import com.google.firebase.firestore.FirebaseFirestore;
 
-import org.checkerframework.checker.nullness.qual.NonNull;
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
Index: app/src/main/java/com/example/fijiapp/activity/LandingPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fijiapp.activity;\r\n\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.fijiapp.R;\r\nimport com.example.fijiapp.adapters.PackageAdapter;\r\nimport com.example.fijiapp.adapters.ProductAdapter;\r\nimport com.example.fijiapp.adapters.ServiceAdapter;\r\nimport com.example.fijiapp.model.Package;\r\nimport com.example.fijiapp.model.Product;\r\nimport com.example.fijiapp.model.Service;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\n// LandingPageActivity.java\r\npublic class LandingPageActivity extends AppCompatActivity {\r\n    private final FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    public interface ProductFetchListener {\r\n        void onProductFetch(List<Product> productList);\r\n        void onError(Exception e);\r\n    }\r\n\r\n    private RadioGroup radioGroup;\r\n    private RadioButton showProductsRadioButton;\r\n    private RadioButton showServicesRadioButton;\r\n    private RecyclerView recyclerView;\r\n    private ProductAdapter productAdapter;\r\n    private ServiceAdapter serviceAdapter;\r\n    private PackageAdapter packageAdapter;\r\n    private List<Product> productList;\r\n    private List<Service> serviceList;\r\n    private List<Package> packageList;\r\n\r\n    // Fields for filtering\r\n    private EditText titleFilterEditText;\r\n    private EditText categoryFilterEditText;\r\n    private EditText subcategoryFilterEditText;\r\n    private EditText minPriceFilterEditText;\r\n    private EditText maxPriceFilterEditText;\r\n    private EditText locationFilterEditText;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_landing_page);\r\n\r\n        // Initialize RecyclerView\r\n        recyclerView = findViewById(R.id.recyclerViewProducts);\r\n\r\n        radioGroup = findViewById(R.id.radioGroup);\r\n        showProductsRadioButton = findViewById(R.id.showProductsRadioButton);\r\n        showServicesRadioButton = findViewById(R.id.showServicesRadioButton);\r\n\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n\r\n        productFilterInit();\r\n        serviceFilterInit();\r\n        packageFilterInit();\r\n\r\n        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\r\n                if (checkedId == R.id.showProductsRadioButton) {\r\n                    // Show products\r\n                    showProducts();\r\n                } else if (checkedId == R.id.showServicesRadioButton) {\r\n                    // Show services\r\n                    showServices();\r\n                } else if (checkedId == R.id.showPackagesRadioButton) {\r\n                    // Show packages\r\n                    showPackages();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void showPackages() {\r\n        recyclerView.setAdapter(packageAdapter);\r\n    }\r\n\r\n    private void showProducts() {\r\n        recyclerView.setAdapter(productAdapter);\r\n    }\r\n\r\n    // Method to show services\r\n    private void showServices() {\r\n        recyclerView.setAdapter(serviceAdapter);\r\n    }\r\n\r\n    private void productFilterInit(){\r\n        // Dummy product list, replace with your actual data\r\n        productList = getProductListFromFirebase();\r\n\r\n        // Initialize Adapter\r\n        productAdapter = new ProductAdapter(productList, this);\r\n        recyclerView.setAdapter(productAdapter);\r\n\r\n        // Initialize filter fields\r\n        titleFilterEditText = findViewById(R.id.titleFilterEditText);\r\n        categoryFilterEditText = findViewById(R.id.categoryFilterEditText);\r\n        subcategoryFilterEditText = findViewById(R.id.subcategoryFilterEditText);\r\n        minPriceFilterEditText = findViewById(R.id.minPriceFilterEditText);\r\n        maxPriceFilterEditText = findViewById(R.id.maxPriceFilterEditText);\r\n\r\n        // Add text change listeners for filtering\r\n        titleFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        categoryFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        subcategoryFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        minPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        maxPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n    }\r\n\r\n    private void serviceFilterInit() {\r\n        // Dummy service list, replace with your actual data\r\n        serviceList = getServiceListFromFirebase();\r\n\r\n        // Initialize Adapter\r\n        serviceAdapter = new ServiceAdapter(serviceList, this, null);\r\n        recyclerView.setAdapter(serviceAdapter);\r\n\r\n        // Initialize filter fields for services\r\n        titleFilterEditText = findViewById(R.id.titleFilterEditText);\r\n        categoryFilterEditText = findViewById(R.id.categoryFilterEditText);\r\n        subcategoryFilterEditText = findViewById(R.id.subcategoryFilterEditText);\r\n        minPriceFilterEditText = findViewById(R.id.minPriceFilterEditText);\r\n        maxPriceFilterEditText = findViewById(R.id.maxPriceFilterEditText);\r\n        locationFilterEditText = findViewById(R.id.locationFilterEditText);\r\n\r\n        // Add text change listeners for filtering\r\n        titleFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        categoryFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        subcategoryFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        minPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        maxPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        locationFilterEditText.addTextChangedListener(filterTextWatcher); // Add location filter text watcher\r\n    }\r\n\r\n    private void packageFilterInit() {\r\n        // Dummy package list, replace with your actual data\r\n        packageList = getPackageListFromFirebase();\r\n\r\n        // Initialize Adapter\r\n        packageAdapter = new PackageAdapter(packageList, this);\r\n        recyclerView.setAdapter(packageAdapter);\r\n\r\n        // Initialize filter fields for packages\r\n        titleFilterEditText = findViewById(R.id.titleFilterEditText);\r\n        categoryFilterEditText = findViewById(R.id.categoryFilterEditText);\r\n        minPriceFilterEditText = findViewById(R.id.minPriceFilterEditText);\r\n        maxPriceFilterEditText = findViewById(R.id.maxPriceFilterEditText);\r\n\r\n        // Add text change listeners for filtering\r\n        titleFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        categoryFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        minPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n        maxPriceFilterEditText.addTextChangedListener(filterTextWatcher);\r\n    }\r\n\r\n\r\n    // Method to get dummy product list (replace with your actual data source)\r\n    public List<Product> getProductListFromFirebase() {\r\n        List<Product> productList = new ArrayList<>();\r\n\r\n        // Access the Firestore database\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        CollectionReference productsRef = db.collection(\"products\");\r\n\r\n        // Retrieve data asynchronously\r\n        productsRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                for (QueryDocumentSnapshot document : task.getResult()) {\r\n                    Product product = document.toObject(Product.class);\r\n                    productList.add(product);\r\n                }\r\n            } else {\r\n\r\n            }\r\n        });\r\n\r\n        return productList;\r\n    }\r\n\r\n\r\n\r\n    private List<Service> getServiceListFromFirebase() {\r\n        List<Service> serviceList = new ArrayList<>();\r\n\r\n        // Access the Firestore database\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        CollectionReference productsRef = db.collection(\"services\");\r\n\r\n        // Retrieve data asynchronously\r\n        productsRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                for (QueryDocumentSnapshot document : task.getResult()) {\r\n                    Service service = document.toObject(Service.class);\r\n                    serviceList.add(service);\r\n                }\r\n            } else {\r\n\r\n            }\r\n        });\r\n\r\n        return serviceList;\r\n    }\r\n\r\n    private List<Package> getPackageListFromFirebase() {\r\n        List<Package> packageList = new ArrayList<>();\r\n\r\n        // Access the Firestore database\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        CollectionReference productsRef = db.collection(\"packages\");\r\n\r\n        // Retrieve data asynchronously\r\n        productsRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                for (QueryDocumentSnapshot document : task.getResult()) {\r\n                    Package p = document.toObject(Package.class);\r\n                    packageList.add(p);\r\n                }\r\n            } else {\r\n\r\n            }\r\n        });\r\n\r\n        return packageList;\r\n    }\r\n\r\n    // TextWatcher for filtering\r\n    private TextWatcher filterTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable editable) {\r\n            filterProducts();\r\n            filterServices();\r\n            filterPackages();\r\n        }\r\n    };\r\n\r\n    // Method to filter products based on filter fields\r\n    private void filterProducts() {\r\n        String titleFilter = titleFilterEditText.getText().toString().toLowerCase();\r\n        String categoryFilter = categoryFilterEditText.getText().toString().toLowerCase();\r\n        String subcategoryFilter = subcategoryFilterEditText.getText().toString().toLowerCase();\r\n        int minPriceFilter = !TextUtils.isEmpty(minPriceFilterEditText.getText().toString()) ? Integer.parseInt(minPriceFilterEditText.getText().toString()) : Integer.MIN_VALUE;\r\n        int maxPriceFilter = !TextUtils.isEmpty(maxPriceFilterEditText.getText().toString()) ? Integer.parseInt(maxPriceFilterEditText.getText().toString()) : Integer.MAX_VALUE;\r\n\r\n        List<Product> filteredList = new ArrayList<>();\r\n\r\n        for (Product product : productList) {\r\n            // Filter by title\r\n            if (!product.Title.toLowerCase().contains(titleFilter))\r\n                continue;\r\n\r\n            // Filter by category\r\n            if (!product.Category.toLowerCase().contains(categoryFilter))\r\n                continue;\r\n\r\n            // Filter by subcategory\r\n            if (!product.SubCategory.toLowerCase().contains(subcategoryFilter))\r\n                continue;\r\n\r\n            // Filter by price\r\n            if (product.Price < minPriceFilter || product.Price > maxPriceFilter)\r\n                continue;\r\n\r\n            // If all filters pass, add product to filtered list\r\n            filteredList.add(product);\r\n        }\r\n\r\n        // Update RecyclerView with filtered list\r\n        productAdapter.filterList(filteredList);\r\n    }\r\n\r\n    private void filterServices() {\r\n        String titleFilter = titleFilterEditText.getText().toString().toLowerCase();\r\n        String categoryFilter = categoryFilterEditText.getText().toString().toLowerCase();\r\n        String subcategoryFilter = subcategoryFilterEditText.getText().toString().toLowerCase();\r\n        String locationFilter = locationFilterEditText.getText().toString().toLowerCase(); // Get location filter value\r\n        int minPriceFilter = !TextUtils.isEmpty(minPriceFilterEditText.getText().toString()) ? Integer.parseInt(minPriceFilterEditText.getText().toString()) : Integer.MIN_VALUE;\r\n        int maxPriceFilter = !TextUtils.isEmpty(maxPriceFilterEditText.getText().toString()) ? Integer.parseInt(maxPriceFilterEditText.getText().toString()) : Integer.MAX_VALUE;\r\n\r\n        List<Service> filteredList = new ArrayList<>();\r\n\r\n        for (Service service : serviceList) {\r\n            // Filter by title\r\n            if (!service.getName().toLowerCase().contains(titleFilter))\r\n                continue;\r\n\r\n            // Filter by category\r\n            if (!service.getCategory().toLowerCase().contains(categoryFilter))\r\n                continue;\r\n\r\n            // Filter by subcategory\r\n            if (!service.getSubCategory().toLowerCase().contains(subcategoryFilter))\r\n                continue;\r\n\r\n            // Filter by location\r\n            if (!service.getLocation().toLowerCase().contains(locationFilter))\r\n                continue;\r\n\r\n            // Filter by price\r\n            // Assuming the service has a pricePerHour attribute\r\n            if (service.getPricePerHour() < minPriceFilter || service.getPricePerHour() > maxPriceFilter)\r\n                continue;\r\n\r\n            // If all filters pass, add service to filtered list\r\n            filteredList.add(service);\r\n        }\r\n\r\n        // Update RecyclerView with filtered list\r\n        serviceAdapter.filterList(filteredList);\r\n    }\r\n\r\n    private void filterPackages() {\r\n        String titleFilter = titleFilterEditText.getText().toString().toLowerCase();\r\n        String categoryFilter = categoryFilterEditText.getText().toString().toLowerCase();\r\n        int minPriceFilter = !TextUtils.isEmpty(minPriceFilterEditText.getText().toString()) ? Integer.parseInt(minPriceFilterEditText.getText().toString()) : Integer.MIN_VALUE;\r\n        int maxPriceFilter = !TextUtils.isEmpty(maxPriceFilterEditText.getText().toString()) ? Integer.parseInt(maxPriceFilterEditText.getText().toString()) : Integer.MAX_VALUE;\r\n\r\n        List<Package> filteredList = new ArrayList<>();\r\n\r\n        for (Package packageItem : packageList) {\r\n            // Filter by title\r\n            if (!packageItem.getName().toLowerCase().contains(titleFilter))\r\n                continue;\r\n\r\n            // Filter by category\r\n            if (!packageItem.getCategory().toLowerCase().contains(categoryFilter))\r\n                continue;\r\n\r\n            // Filter by price\r\n            if (packageItem.getPrice() < minPriceFilter || packageItem.getPrice() > maxPriceFilter)\r\n                continue;\r\n\r\n            // If all filters pass, add package to filtered list\r\n            filteredList.add(packageItem);\r\n        }\r\n\r\n        // Update RecyclerView with filtered list\r\n        packageAdapter.filterList(filteredList);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        // Remove text change listeners to avoid memory leaks\r\n        titleFilterEditText.removeTextChangedListener(filterTextWatcher);\r\n        categoryFilterEditText.removeTextChangedListener(filterTextWatcher);\r\n        subcategoryFilterEditText.removeTextChangedListener(filterTextWatcher);\r\n        minPriceFilterEditText.removeTextChangedListener(filterTextWatcher);\r\n        maxPriceFilterEditText.removeTextChangedListener(filterTextWatcher);\r\n        locationFilterEditText.removeTextChangedListener(filterTextWatcher); // Remove location filter text watcher\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fijiapp/activity/LandingPageActivity.java b/app/src/main/java/com/example/fijiapp/activity/LandingPageActivity.java
--- a/app/src/main/java/com/example/fijiapp/activity/LandingPageActivity.java	(revision d23069e360fd335693d76d78452f6ac48e52bafd)
+++ b/app/src/main/java/com/example/fijiapp/activity/LandingPageActivity.java	(date 1715255423779)
@@ -254,9 +254,9 @@
 
         @Override
         public void afterTextChanged(Editable editable) {
-            filterProducts();
+//            filterProducts();
             filterServices();
-            filterPackages();
+//            filterPackages();
         }
     };
 
